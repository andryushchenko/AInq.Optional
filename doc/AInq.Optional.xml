<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AInq.Optional</name>
    </assembly>
    <members>
        <member name="T:AInq.Optional.ConvertExtension">
            <summary> Monad convert utils </summary>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.MaybeLeft``2(AInq.Optional.Either{``0,``1})">
            <summary> Get left value or none </summary>
            <param name="either"> Either source </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Maybe with left value </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.MaybeRight``2(AInq.Optional.Either{``0,``1})">
            <summary> Get right value or none </summary>
            <param name="either"> Either source </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Maybe with right value </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.TryLeft``2(AInq.Optional.Either{``0,``1})">
            <summary> Try get left value </summary>
            <param name="either"> Either source </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Try with left value </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.TryRight``2(AInq.Optional.Either{``0,``1})">
            <summary> Try get right value </summary>
            <param name="either"> Either source </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Try with right value </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.Or``2(AInq.Optional.Maybe{``0},``1)">
            <summary> Get source value or other if empty </summary>
            <param name="maybe"> Maybe source </param>
            <param name="other"> Other value </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Either </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.Or``2(AInq.Optional.Try{``0},``1)">
            <summary> Get source value or other if exception </summary>
            <param name="try"> Try source </param>
            <param name="other"> Other value </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Either </returns>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.Or``1(AInq.Optional.Maybe{``0},AInq.Optional.Try{``0})">
            <summary> Get value form this item or other </summary>
            <param name="maybe"> Maybe item </param>
            <param name="try"> Try item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.Or``1(AInq.Optional.Try{``0},AInq.Optional.Maybe{``0})">
            <summary> Get value form this item or other </summary>
            <param name="try"> Try item </param>
            <param name="maybe"> Maybe item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.AsTry``1(AInq.Optional.Maybe{``0})">
            <summary> Convert <see cref="T:AInq.Optional.Maybe`1" /> to <see cref="T:AInq.Optional.Try`1" /> </summary>
            <param name="maybe"> Maybe item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.ConvertExtension.AsMaybe``1(AInq.Optional.Try{``0})">
            <summary> Convert <see cref="T:AInq.Optional.Try`1" /> to <see cref="T:AInq.Optional.Maybe`1" /> </summary>
            <param name="try"> Try item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="T:AInq.Optional.Either">
            <summary> Either monad utils </summary>
        </member>
        <member name="M:AInq.Optional.Either.Left``2(``0)">
            <summary> Create Either from left value </summary>
            <param name="left"> Left value </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.Right``2(``1)">
            <summary> Create Either from right value </summary>
            <param name="right"> Right value </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.AsEither``2(``0)">
            <summary> Convert left value to Either </summary>
            <param name="left"> Left value </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.AsEither``2(``1)">
            <summary> Convert right value to Either </summary>
            <param name="right"> Right value </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.Invert``2(AInq.Optional.Either{``0,``1})">
            <summary> Swap left and right values </summary>
        </member>
        <member name="M:AInq.Optional.Either.SelectLeft``3(AInq.Optional.Either{``0,``1},System.Func{``0,``2})">
            <summary> Convert to other left value type </summary>
            <param name="either"> Either item </param>
            <param name="leftSelector"> Left value converter </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
            <typeparam name="TLeftResult"> Left result type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.SelectLeft``3(AInq.Optional.Either{``0,``1},System.Func{``0,AInq.Optional.Either{``2,``1}})">
            <inheritdoc cref="M:AInq.Optional.Either.SelectLeft``3(AInq.Optional.Either{``0,``1},System.Func{``0,``2})" />
        </member>
        <member name="M:AInq.Optional.Either.SelectRight``3(AInq.Optional.Either{``0,``1},System.Func{``1,``2})">
            <summary> Convert to other right value type </summary>
            <param name="either"> Either item </param>
            <param name="rightSelector"> Right value converter </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <typeparam name="TRightResult"> Right result type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.SelectRight``3(AInq.Optional.Either{``0,``1},System.Func{``1,AInq.Optional.Either{``0,``2}})">
            <inheritdoc cref="M:AInq.Optional.Either.SelectRight``3(AInq.Optional.Either{``0,``1},System.Func{``1,``2})" />
        </member>
        <member name="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary> Convert to other type </summary>
            <param name="either"> Either item </param>
            <param name="leftSelector"> Left value converter </param>
            <param name="rightSelector"> Right value converter </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <typeparam name="TLeftResult"> Left result type </typeparam>
            <typeparam name="TRightResult"> Right result type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,AInq.Optional.Either{``2,``3}},System.Func{``1,``3})">
            <inheritdoc cref="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``3})" />
        </member>
        <member name="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,AInq.Optional.Either{``2,``3}})">
            <inheritdoc cref="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``3})" />
        </member>
        <member name="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,AInq.Optional.Either{``2,``3}},System.Func{``1,AInq.Optional.Either{``2,``3}})">
            <inheritdoc cref="M:AInq.Optional.Either.Select``4(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``3})" />
        </member>
        <member name="M:AInq.Optional.Either.LeftOrDefault``2(AInq.Optional.Either{``0,``1})">
            <summary> Get left value or default </summary>
            <param name="either"> Either item </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.LeftOrDefault``2(AInq.Optional.Either{``0,``1},``0)">
            <summary> Get left value or default </summary>
            <param name="either"> Either item </param>
            <param name="defaultValue"> Default value </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.LeftOrDefault``2(AInq.Optional.Either{``0,``1},System.Func{``0})">
            <summary> Get left value or default from generator </summary>
            <param name="either"> Either item </param>
            <param name="defaultGenerator"> Default value generator </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.RightOrDefault``2(AInq.Optional.Either{``0,``1})">
            <summary> Get right value or default </summary>
            <param name="either"> Either item </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.RightOrDefault``2(AInq.Optional.Either{``0,``1},``1)">
            <summary> Get right value or default </summary>
            <param name="either"> Either item </param>
            <param name="defaultValue"> Default value </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.RightOrDefault``2(AInq.Optional.Either{``0,``1},System.Func{``1})">
            <summary> Get right value or default from generator </summary>
            <param name="either"> Either item </param>
            <param name="defaultGenerator"> Default value generator </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.ToLeft``2(AInq.Optional.Either{``0,``1},System.Func{``1,``0})">
            <summary> Convert to left value type </summary>
            <param name="either"> Either item </param>
            <param name="rightToLeft"> Right to left converter </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.ToRight``2(AInq.Optional.Either{``0,``1},System.Func{``0,``1})">
            <summary> Convert to right value type </summary>
            <param name="either"> Either item </param>
            <param name="leftToRight"> Left to right converter </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.ToValue``3(AInq.Optional.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary> Convert to other value type </summary>
            <param name="either"> Either item </param>
            <param name="fromLeft"> Left value converter </param>
            <param name="fromRight"> Right value converter </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <typeparam name="TResult"> Left result type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.LeftValues``2(System.Collections.Generic.IEnumerable{AInq.Optional.Either{``0,``1}})">
            <summary> Select existing left values </summary>
            <param name="collection"> Either collection </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Left values collection </returns>
        </member>
        <member name="M:AInq.Optional.Either.RightValues``2(System.Collections.Generic.IEnumerable{AInq.Optional.Either{``0,``1}})">
            <summary> Select existing right values </summary>
            <param name="collection"> Either collection </param>
            <typeparam name="TLeft"> Left source type </typeparam>
            <typeparam name="TRight"> Right source type </typeparam>
            <returns> Right values collection </returns>
        </member>
        <member name="M:AInq.Optional.Either.DoLeft``2(AInq.Optional.Either{``0,``1},System.Action{``0})">
            <summary> Do action with left value (if exists) </summary>
            <param name="either"> Either item </param>
            <param name="leftAction"> Left value action </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.DoRight``2(AInq.Optional.Either{``0,``1},System.Action{``1})">
            <summary> Do action with right value (if exists) </summary>
            <param name="either"> Either item </param>
            <param name="rightAction"> Right value action </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Either.Do``2(AInq.Optional.Either{``0,``1},System.Action{``0},System.Action{``1})">
            <summary> Do action with left or right value </summary>
            <param name="either"> Either item </param>
            <param name="leftAction"> Left value action </param>
            <param name="rightAction"> Right value action </param>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="T:AInq.Optional.Either`2">
            <summary> Either monad </summary>
            <typeparam name="TLeft"> Left value type </typeparam>
            <typeparam name="TRight"> Right value type </typeparam>
        </member>
        <member name="P:AInq.Optional.Either`2.HasLeft">
            <summary> Check if item contains left value </summary>
        </member>
        <member name="P:AInq.Optional.Either`2.HasRight">
            <summary> Check if item contains right value </summary>
        </member>
        <member name="P:AInq.Optional.Either`2.Left">
            <summary> Left value (if exists) </summary>
        </member>
        <member name="P:AInq.Optional.Either`2.Right">
            <summary> Right value (if exists) </summary>
        </member>
        <member name="M:AInq.Optional.Either`2.Equals(AInq.Optional.Either{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Either`2.ToString">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Either`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Either`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Either`2.Equals(AInq.Optional.Either{`1,`0})">
            <inheritdoc cref="M:AInq.Optional.Either`2.Equals(AInq.Optional.Either{`0,`1})" />
        </member>
        <member name="M:AInq.Optional.Either`2.Equals(`1)">
            <inheritdoc cref="M:AInq.Optional.Either`2.Equals(AInq.Optional.Either{`0,`1})" />
        </member>
        <member name="M:AInq.Optional.Either`2.Equals(`0)">
            <inheritdoc cref="M:AInq.Optional.Either`2.Equals(AInq.Optional.Either{`0,`1})" />
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(AInq.Optional.Either{`0,`1},AInq.Optional.Either{`0,`1})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(AInq.Optional.Either{`0,`1},AInq.Optional.Either{`0,`1})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(AInq.Optional.Either{`0,`1},AInq.Optional.Either{`1,`0})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(AInq.Optional.Either{`0,`1},AInq.Optional.Either{`1,`0})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(AInq.Optional.Either{`0,`1},`0)">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(AInq.Optional.Either{`0,`1},`0)">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(AInq.Optional.Either{`0,`1},`1)">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(AInq.Optional.Either{`0,`1},`1)">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(`0,AInq.Optional.Either{`0,`1})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(`0,AInq.Optional.Either{`0,`1})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Equality(`1,AInq.Optional.Either{`0,`1})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Either`2.op_Inequality(`1,AInq.Optional.Either{`0,`1})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="T:AInq.Optional.Maybe">
            <summary> Maybe monad utils </summary>
        </member>
        <member name="M:AInq.Optional.Maybe.None``1">
            <summary> Create empty Maybe </summary>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Value``1(``0)">
            <summary> Create Maybe from value </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.AsMaybe``1(``0)">
            <inheritdoc cref="M:AInq.Optional.Maybe.Value``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Maybe.ValueIfNotNull``1(``0)">
            <summary> Create Maybe from value if not null </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.AsMaybeIfNotNull``1(``0)">
            <inheritdoc cref="M:AInq.Optional.Maybe.ValueIfNotNull``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Maybe.ValueIfNotNull``1(System.Nullable{``0})">
            <inheritdoc cref="M:AInq.Optional.Maybe.ValueIfNotNull``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Maybe.AsMaybeIfNotNull``1(System.Nullable{``0})">
            <inheritdoc cref="M:AInq.Optional.Maybe.ValueIfNotNull``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Maybe.Select``2(AInq.Optional.Maybe{``0},System.Func{``0,``1})">
            <summary> Convert to other value type </summary>
            <param name="maybe"> Maybe item </param>
            <param name="selector"> Converter </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Select``2(AInq.Optional.Maybe{``0},System.Func{``0,AInq.Optional.Maybe{``1}})">
            <inheritdoc cref="M:AInq.Optional.Maybe.Select``2(AInq.Optional.Maybe{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1})">
            <summary> Convert to other value type or default </summary>
            <param name="maybe"> Maybe item </param>
            <param name="selector"> Converter </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,AInq.Optional.Maybe{``1}})">
            <inheritdoc cref="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1},``1)">
            <summary> Convert to other value type or default </summary>
            <param name="maybe"> Maybe item </param>
            <param name="selector"> Converter </param>
            <param name="defaultValue"> Default value </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,AInq.Optional.Maybe{``1}},``1)">
            <inheritdoc cref="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1},``1)" />
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1},System.Func{``1})">
            <summary> Convert to other value type or default from generator </summary>
            <param name="maybe"> Maybe item </param>
            <param name="selector"> Converter </param>
            <param name="defaultGenerator"> Default value generator </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,AInq.Optional.Maybe{``1}},System.Func{``1})">
            <inheritdoc cref="M:AInq.Optional.Maybe.SelectOrDefault``2(AInq.Optional.Maybe{``0},System.Func{``0,``1},System.Func{``1})" />
        </member>
        <member name="M:AInq.Optional.Maybe.ValueOrDefault``1(AInq.Optional.Maybe{``0})">
            <summary> Get value or default </summary>
            <param name="maybe"> Maybe item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.ValueOrDefault``1(AInq.Optional.Maybe{``0},``0)">
            <summary> Get value or default </summary>
            <param name="maybe"> Maybe item </param>
            <param name="defaultValue"> Default value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.ValueOrDefault``1(AInq.Optional.Maybe{``0},System.Func{``0})">
            <summary> Get value or default from generator </summary>
            <param name="maybe"> Maybe item </param>
            <param name="defaultGenerator"> Default value generator </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Or``1(AInq.Optional.Maybe{``0},AInq.Optional.Maybe{``0})">
            <summary> Get value form this item or other </summary>
            <param name="maybe"> Maybe item </param>
            <param name="other"> Other </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Filter``1(AInq.Optional.Maybe{``0},System.Func{``0,System.Boolean})">
            <summary> Filter value </summary>
            <param name="maybe"> Maybe item </param>
            <param name="filter"> Filter </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Unwrap``1(AInq.Optional.Maybe{AInq.Optional.Maybe{``0}})">
            <summary> Unwrap nested Maybe </summary>
            <param name="maybe"> Maybe item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Values``1(System.Collections.Generic.IEnumerable{AInq.Optional.Maybe{``0}})">
            <summary> Select existing values </summary>
            <param name="collection"> Maybe collection </param>
            <typeparam name="T"> Value type </typeparam>
            <returns> Values collection </returns>
        </member>
        <member name="M:AInq.Optional.Maybe.Do``1(AInq.Optional.Maybe{``0},System.Action{``0})">
            <summary> Do action with value (if exists) </summary>
            <param name="maybe"> Maybe item </param>
            <param name="valueAction"> Action if value exists </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.Do``1(AInq.Optional.Maybe{``0},System.Action{``0},System.Action)">
            <summary> Do action </summary>
            <param name="maybe"> Maybe item </param>
            <param name="valueAction"> Action if value exists </param>
            <param name="emptyAction"> Action if empty </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Maybe.DoIfEmpty``1(AInq.Optional.Maybe{``0},System.Action)">
            <summary> Do action if empty </summary>
            <param name="maybe"> Maybe item </param>
            <param name="emptyAction"> Action if empty </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="T:AInq.Optional.Maybe`1">
            <summary> Maybe monad </summary>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="P:AInq.Optional.Maybe`1.HasValue">
            <summary> Check if item contains value </summary>
        </member>
        <member name="P:AInq.Optional.Maybe`1.Value">
            <summary> Item value (if exists) </summary>
        </member>
        <member name="M:AInq.Optional.Maybe`1.Equals(AInq.Optional.Maybe{`0})">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Maybe`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Maybe`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Maybe`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Maybe`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Equality(AInq.Optional.Maybe{`0},AInq.Optional.Maybe{`0})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Inequality(AInq.Optional.Maybe{`0},AInq.Optional.Maybe{`0})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Equality(AInq.Optional.Maybe{`0},`0)">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Inequality(AInq.Optional.Maybe{`0},`0)">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Equality(`0,AInq.Optional.Maybe{`0})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Maybe`1.op_Inequality(`0,AInq.Optional.Maybe{`0})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="T:AInq.Optional.Try">
            <summary> Try monad utils </summary>
        </member>
        <member name="M:AInq.Optional.Try.Value``1(``0)">
            <summary> Create Try from value </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.AsTry``1(``0)">
            <summary> Convert value to Try </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Error``1(System.Exception)">
            <summary> Create Try from exception </summary>
            <param name="exception"> Exception </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.AsTry``1(System.Exception)">
            <summary> Convert exception to Try </summary>
            <param name="exception"> Exception </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.ValueIfNotNull``1(``0)">
            <summary> Create Try from value if not null </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.AsTryIfNotNull``1(``0)">
            <summary> Convert value to Try if not null </summary>
            <param name="value"> Value </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.ValueIfNotNull``1(System.Nullable{``0})">
            <inheritdoc cref="M:AInq.Optional.Try.ValueIfNotNull``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Try.AsTryIfNotNull``1(System.Nullable{``0})">
            <inheritdoc cref="M:AInq.Optional.Try.AsTryIfNotNull``1(``0)" />
        </member>
        <member name="M:AInq.Optional.Try.Result``1(System.Func{``0})">
            <summary> Create Try from value generator </summary>
            <param name="generator"> Value generator </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.ResultIfNotNull``1(System.Func{``0})">
            <summary> Create Try from value generator if not null </summary>
            <param name="generator"> Value generator </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.ResultIfNotNull``1(System.Func{System.Nullable{``0}})">
            <inheritdoc cref="M:AInq.Optional.Try.ResultIfNotNull``1(System.Func{System.Nullable{``0}})" />
        </member>
        <member name="M:AInq.Optional.Try.Select``2(AInq.Optional.Try{``0},System.Func{``0,``1})">
            <summary> Convert to other value type </summary>
            <param name="try"> Try item </param>
            <param name="selector"> Converter </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Select``2(AInq.Optional.Try{``0},System.Func{``0,AInq.Optional.Try{``1}})">
            <summary> Convert to other value type </summary>
            <param name="try"> Try item </param>
            <param name="selector"> Converter </param>
            <typeparam name="T"> Source value type </typeparam>
            <typeparam name="TResult"> Result value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Or``1(AInq.Optional.Try{``0},AInq.Optional.Try{``0})">
            <summary> Get value form this item or other </summary>
            <param name="try"> Try item </param>
            <param name="other"> Other </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Unwrap``1(AInq.Optional.Try{AInq.Optional.Try{``0}})">
            <summary> Unwrap nested Try </summary>
            <param name="try"> Try item </param>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Values``1(System.Collections.Generic.IEnumerable{AInq.Optional.Try{``0}})">
            <summary> Select existing values </summary>
            <param name="collection"> Try collection </param>
            <typeparam name="T"> Value type </typeparam>
            <returns> Values collection </returns>
        </member>
        <member name="M:AInq.Optional.Try.Errors``1(System.Collections.Generic.IEnumerable{AInq.Optional.Try{``0}})">
            <summary> Select exceptions </summary>
            <param name="collection"> Try collection </param>
            <typeparam name="T"> Value type </typeparam>
            <returns> Exceptions collection </returns>
        </member>
        <member name="M:AInq.Optional.Try.Do``1(AInq.Optional.Try{``0},System.Action{``0},System.Boolean)">
            <summary> Try do action with value </summary>
            <param name="try"> Try item </param>
            <param name="valueAction"> Action if value exists </param>
            <param name="throwIfError"> Throw exception if item contains error </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.Do``1(AInq.Optional.Try{``0},System.Action{``0},System.Action{System.Exception})">
            <summary> Try do action </summary>
            <param name="try"> Try item </param>
            <param name="valueAction"> Action if value exists </param>
            <param name="errorAction"> Action if error </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try.DoIfError``1(AInq.Optional.Try{``0},System.Action{System.Exception})">
            <summary> Try do action with error </summary>
            <param name="try"> Try item </param>
            <param name="errorAction"> Action if error </param>
            <typeparam name="T"> Source value type </typeparam>
        </member>
        <member name="T:AInq.Optional.Try`1">
            <summary> Try monad </summary>
            <typeparam name="T"> Value type </typeparam>
        </member>
        <member name="P:AInq.Optional.Try`1.Success">
            <summary> Check if item is success </summary>
        </member>
        <member name="P:AInq.Optional.Try`1.Value">
            <summary> Item value (if success) </summary>
        </member>
        <member name="P:AInq.Optional.Try`1.Error">
            <summary> Exception or null if success </summary>
        </member>
        <member name="M:AInq.Optional.Try`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Try`1.Equals(AInq.Optional.Try{`0})">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Try`1.Throw``1">
            <summary> Throw if contains exception of target type </summary>
            <typeparam name="TException"> Target exception type </typeparam>
        </member>
        <member name="M:AInq.Optional.Try`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Try`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Try`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AInq.Optional.Try`1.op_Equality(AInq.Optional.Try{`0},AInq.Optional.Try{`0})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Try`1.op_Inequality(AInq.Optional.Try{`0},AInq.Optional.Try{`0})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Try`1.op_Equality(AInq.Optional.Try{`0},`0)">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Try`1.op_Inequality(AInq.Optional.Try{`0},`0)">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Try`1.op_Equality(`0,AInq.Optional.Try{`0})">
            <summary> Equality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
        <member name="M:AInq.Optional.Try`1.op_Inequality(`0,AInq.Optional.Try{`0})">
            <summary> Inequality comparison </summary>
            <param name="a"> First element </param>
            <param name="b"> Second element </param>
        </member>
    </members>
</doc>
